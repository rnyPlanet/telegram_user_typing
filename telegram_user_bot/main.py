from pyrogram import Client, filters
from pyrogram.errors import FloodWait
from pyrogram.raw import functions

from pyrogram.types import ChatPermissions

import time
from time import sleep
import random

app = Client("my_account")

commands = ["coms", "type", "hack", "pidor", "flip", "un", "clown", "rat", "test", "sleep", "thx", "d"]


@app.on_message(filters.command(commands[0], prefixes=".") & filters.me)
def type(_, msg):
    coms = "Commands: "
    for i in commands:
        coms += " \n." + i
        if i in "type":
            coms += " __text__"
        if i in "pidor":
            coms += " __empty__ OR @uname OR @uname1 @unameN"
        if i in "flip":
            coms += " __text__"
        if i in "rat":
            coms += " __empty__ OR @uname OR @uname1 @unameN"
        if i in "sleep":
            coms += " __empty__ OR @uname OR @uname1 @unameN"
        if i in "thx":
            coms += " __empty__ OR @uname"
        if i in "d":
            coms += ""
    msg.edit(coms)


@app.on_message(filters.command(commands[1], prefixes=".") & filters.me)
def type(_, msg):
    orig_text = msg.text.split(".type ", maxsplit=1)[1]
    text = orig_text
    tbp = ""  # to be printed
    typing_symbol = "‚ñí"

    while (tbp != orig_text):
        try:
            msg.edit(tbp + typing_symbol)
            sleep(0.2)  # 50 ms

            tbp = tbp + text[0]
            text = text[1:]

            msg.edit(tbp)
            sleep(0.2)

        except FloodWait as e:
            sleep(e.x)


@app.on_message(filters.command(commands[2], prefixes=".") & filters.me)
def hack(_, msg):
    perc = 0

    while (perc < 100):
        try:
            text = "üëÆ‚Äç –í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ..." + str(perc) + "%"
            msg.edit(text)

            perc += random.randint(1, 3)
            sleep(0.1)

        except FloodWait as e:
            sleep(e.x)

    msg.edit("üü¢ –ü–µ–Ω—Ç–∞–≥–æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!")
    sleep(3)

    msg.edit("üëΩ –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ù–õ–û ...")
    perc = 0

    while (perc < 100):
        try:
            text = "üëΩ –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ù–õ–û ..." + str(perc) + "%"
            msg.edit(text)

            perc += random.randint(1, 5)
            sleep(0.15)

        except FloodWait as e:
            sleep(e.x)

    msg.edit("ü¶ñ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ –Ω–∞ –∑–µ–º–ª–µ!")


@app.on_message(filters.command(commands[3], prefixes=".") & filters.me)
def hack(_, msg):
    perc = 0
    single_chat = None

    usernames = msg.text.split(" ")
    if len(usernames) == 1:
        usernames = None
        try:
            single_chat = msg.chat.username
        except:
            print()

    while (perc < 100):
        try:
            text = "üì° –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –ø–∏–¥–∞—Ä–∞—Å–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞... " + str(perc) + "%"
            msg.edit(text)

            perc += random.randint(5, 10)
            sleep(0.1)

        except FloodWait as e:
            sleep(e.x)

    if usernames is not None:
        if len(usernames) == 2:
            msg.edit(f"üü¢ –ü–∏–¥–∞—Ä–∞—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω! {usernames[1]}")
        elif len(usernames) > 2:
            pidors = "üü¢ –ü–∏–¥–∞—Ä–∞—Å—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã! "
            for i in usernames:
                if '.pidor' not in i:
                    pidors += " " + i

            msg.edit(pidors)
    else:
        if single_chat == None:
            msg.edit(f"üü¢ –¢—ã –ø–∏–¥–∞—Ä–∞—Å!")
        else:
            msg.edit(f"üü¢ –ü–∏–¥–∞—Ä–∞—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω! @{single_chat}")

    sleep(3)


REPLACEMENT_MAP = {
    "a": "…ê",
    "b": "q",
    "c": "…î",
    "d": "p",
    "e": "«ù",
    "f": "…ü",
    "g": "∆É",
    "h": "…•",
    "i": "·¥â",
    "j": "…æ",
    "k": " û",
    "l": "l",
    "m": "…Ø",
    "n": "u",
    "o": "o",
    "p": "d",
    "q": "b",
    "r": "…π",
    "s": "s",
    "t": " á",
    "u": "n",
    "v": " å",
    "w": " ç",
    "x": "x",
    "y": " é",
    "z": "z",
    "A": "‚àÄ",
    "B": "B",
    "C": "∆Ü",
    "D": "D",
    "E": "∆é",
    "F": "‚Ñ≤",
    "G": "◊§",
    "H": "H",
    "I": "I",
    "J": "≈ø",
    "K": "K",
    "L": "À•",
    "M": "W",
    "N": "N",
    "O": "O",
    "P": "‘Ä",
    "Q": "Q",
    "R": "R",
    "S": "S",
    "T": "‚î¥",
    "U": "‚à©",
    "V": "Œõ",
    "W": "M",
    "X": "X",
    "Y": "‚ÖÑ",
    "Z": "Z",
    "0": "0",
    "1": "∆ñ",
    "2": "·ÑÖ",
    "3": "∆ê",
    "4": "„Ñ£",
    "5": "œõ",
    "6": "9",
    "7": "„Ñ•",
    "8": "8",
    "9": "6",
    ",": "'",
    ".": "Àô",
    "?": "¬ø",
    "!": "¬°",
    '"': ",,",
    "'": ",",
    "(": ")",
    ")": "(",
    "[": "]",
    "]": "[",
    "{": "}",
    "}": "{",
    "<": ">",
    ">": "<",
    "&": "‚Öã",
    "_": "‚Äæ",
}


@app.on_message(filters.command(commands[4], prefixes=".") & filters.me)
def flip(_, msg):
    text = msg.text.split(".flip", maxsplit=1)[1]
    final_str = ""
    for char in text:
        if char in REPLACEMENT_MAP.keys():
            new_char = REPLACEMENT_MAP[char]
        else:
            new_char = char
        final_str += new_char
    if text != final_str:
        msg.edit(final_str)
    else:
        msg.edit(text)


@app.on_message(filters.command(commands[5], prefixes=".") & filters.me)
def unread_chat(app, message):
    message.delete()
    app.send(
        functions.messages.MarkDialogUnread(
            peer=app.resolve_peer(message.chat.id), unread=True
        )
    )


@app.on_message(filters.command(commands[6], prefixes=".") & filters.me)
def type(_, msg):
    msg.edit("–î—Ä—É–∂–æ—á–µ–∫, —Ç—ã –≤–∏–¥–∏–º–æ –Ω–µ –ø–æ–Ω—è–ª —Å –∫–µ–º –æ–±—â–∞–µ—à—å—Å—è. –í–æ—Ç —ç—Ç–∞ —Ç–≤–æ—è –º–∞–Ω–µ—Ä–∞ —Ä–µ—á–∏ '–∫–ª–æ—É–Ω—Å–∫–∞—è' –º–µ–Ω—è –Ω–µ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç, –¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è, –æ–±—ä—è—Å–Ω—é –Ω–∞ –ø–æ–Ω—è—Ç–Ω–æ–º —Ç–µ–±–µ —è–∑—ã–∫–µ, —è–∑—ã–∫–µ –±–æ–ª–∏")


@app.on_message(filters.command(commands[7], prefixes=".") & filters.me)
def hack(_, msg):
    perc = 0
    single_chat = None

    usernames = msg.text.split(" ")
    if len(usernames) == 1:
        usernames = None
        try:
            single_chat = msg.chat.username
        except:
            print()

    while (perc < 100):
        try:
            text = "üì° –ü–æ–∏—Å–∫ –∫—Ä—ã—Å... " + str(perc) + "%"
            msg.edit(text)

            perc += random.randint(5, 10)
            sleep(0.1)

        except FloodWait as e:
            sleep(e.x)

    if usernames is not None:
        if len(usernames) == 2:
            msg.edit(f"üêÄ –ï–±–∞—Ç—å {usernames[1]} –∫—Ä—ã—Å–∞!")
        elif len(usernames) > 2:
            rats = "üêÄ –ï–±–∞—Ç—å"
            for i in usernames:
                if '.rat' not in i:
                    rats += " " + i

            rats += " –∫—Ä—ã—Å—ã!"
            msg.edit(rats)
    else:
        if single_chat == None:
            msg.edit(f"üêÄ –¢—ã –∫—Ä—ã—Å–∞!")
        else:
            msg.edit(f"üêÄ –ï–±–∞—Ç—å @{single_chat} –∫—Ä—ã—Å–∞!")

    sleep(3)


@app.on_message(filters.command(commands[7], prefixes=".") & filters.text)
def del_rat(_, msg):
    me = app.get_me()
    try:
        app.delete_messages(msg.chat.id, msg.message_id)
    except:
        if me.username in msg.message:
            app.send_message(msg.chat.id, "–î–∞ —Å–∞–º —Ç—ã –∫—Ä—ã—Å–∞!")

@app.on_message(filters.command(commands[8], prefixes=".") & filters.me)
def hack(_, msg):
    try:
        msg.edit(f"—Å–æ—Å–∏ ‚ù§")
    except:
        app.send_message(msg.chat.id, "—Å–æ—Å–∏ ‚ù§")


@app.on_message(filters.command(commands[9], prefixes=".") & filters.me)
def hack(_, msg):
    single_chat = None

    usernames = msg.text.split(" ")
    if len(usernames) == 1:
        usernames = None
        try:
            single_chat = msg.chat.username
        except:
            pass

    try:
        if usernames is not None:
            if len(usernames) == 2:
                msg.edit(f"–ë–ª—è, {usernames[1]} –∏–¥–∏ –ø–æ—Å–ø–∏ –∏–¥–∏ –ø—Ä–∏–ª—è–≥!")
            elif len(usernames) > 2:
                rats = "–ë–ª—è"
                for i in usernames:
                    if '.sleep' not in i:
                        rats += " " + i

                rats += " –∏–¥–∏—Ç–µ –ø–æ—Å–ø–∏—Ç–µ –∏–¥–∏—Ç–µ –ø—Ä–∏–ª—è–≥—Ç–µ!"
                msg.edit(rats)
        else:
            if single_chat == None:
                msg.edit(f"–ë–ª—è, –∏–¥–∏ –ø–æ—Å–ø–∏ –∏–¥–∏ –ø—Ä–∏–ª—è–≥!")
            else:
                msg.edit(f"–ë–ª—è, @{single_chat} –∏–¥–∏ –ø–æ—Å–ø–∏ –∏–¥–∏ –ø—Ä–∏–ª—è–≥!")
    except:
        if usernames is not None:
            if len(usernames) == 2:
                app.send_message(msg.chat.id, f"–ë–ª—è, {usernames[1]} –∏–¥–∏ –ø–æ—Å–ø–∏ –∏–¥–∏ –ø—Ä–∏–ª—è–≥!")
            elif len(usernames) > 2:
                rats = "–ë–ª—è"
                for i in usernames:
                    if '.sleep' not in i:
                        rats += " " + i

                rats += " –∏–¥–∏—Ç–µ –ø–æ—Å–ø–∏—Ç–µ –∏–¥–∏—Ç–µ –ø—Ä–∏–ª—è–≥—Ç–µ!"
                app.send_message(msg.chat.id, rats)
        else:
            if single_chat == None:
                app.send_message(msg.chat.id, f"–ë–ª—è, –∏–¥–∏ –ø–æ—Å–ø–∏ –∏–¥–∏ –ø—Ä–∏–ª—è–≥!")
            else:
                app.send_message(msg.chat.id, f"–ë–ª—è, @{single_chat} –∏–¥–∏ –ø–æ—Å–ø–∏ –∏–¥–∏ –ø—Ä–∏–ª—è–≥!")

    sleep(3)

@app.on_message(filters.command(commands[10], prefixes=".") & filters.me)
def photo(_, msg):
    msg.delete()
    single_chat = None

    usernames = msg.text.split(" ")
    if len(usernames) == 1:
        usernames = None
        try:
            single_chat = msg.chat.username
        except:
            pass

    if usernames is not None:
        if len(usernames) == 2:
            app.send_photo(msg.chat.id, "photo.jpg", caption=f"{usernames[1]}")
    else:
        if single_chat == None:
            app.send_photo(msg.chat.id, "photo.jpg")
        else:
            app.send_photo(msg.chat.id, "photo.jpg", caption=f"@{single_chat}")

@app.on_message(filters.command(commands[11], prefixes=".") & filters.me)
def d(_, msg):
    try:
        app.delete_messages(msg.chat.id, msg.reply_to_message.message_id)
    except:
        pass
    msg.delete()

app.run()